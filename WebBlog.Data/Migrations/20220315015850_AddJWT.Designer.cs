// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebBlog.Data;

namespace WebBlog.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220315015850_AddJWT")]
    partial class AddJWT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebBlog.Data.Model.Category", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("metaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("parentId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("ID");

                    b.HasIndex("parentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Post", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("authorId")
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("metaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("parentId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<byte>("published")
                        .HasMaxLength(1)
                        .HasColumnType("TINYINT");

                    b.Property<DateTime>("publishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("authorId");

                    b.HasIndex("parentId");

                    b.HasIndex("slug")
                        .IsUnique()
                        .HasFilter("[slug] IS NOT NULL");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostCategory", b =>
                {
                    b.Property<long>("postId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("categoryId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.HasKey("postId", "categoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostComment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("parentId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("postId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<byte>("published")
                        .HasMaxLength(1)
                        .HasColumnType("TINYINT");

                    b.Property<DateTime>("publishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("parentId");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostMeta", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("postId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("postId")
                        .IsUnique();

                    b.ToTable("PostMetas");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostTag", b =>
                {
                    b.Property<long>("postId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("tagId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.HasKey("postId", "tagId");

                    b.HasIndex("tagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Tag", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("metaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("title")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("WebBlog.Data.Model.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("firstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("intro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("middleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("passwordHash")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("phoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("profile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("registeredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("email")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("phoneNumber")
                        .IsUnique()
                        .HasFilter("[phoneNumber] IS NOT NULL");

                    b.HasIndex("roleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Category", b =>
                {
                    b.HasOne("WebBlog.Data.Model.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("parentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Post", b =>
                {
                    b.HasOne("WebBlog.Data.Model.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebBlog.Data.Model.Post", "Parent")
                        .WithMany()
                        .HasForeignKey("parentId");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostCategory", b =>
                {
                    b.HasOne("WebBlog.Data.Model.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebBlog.Data.Model.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostComment", b =>
                {
                    b.HasOne("WebBlog.Data.Model.PostComment", "Parent")
                        .WithMany()
                        .HasForeignKey("parentId");

                    b.HasOne("WebBlog.Data.Model.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebBlog.Data.Model.User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostMeta", b =>
                {
                    b.HasOne("WebBlog.Data.Model.Post", "Post")
                        .WithMany("PostMetas")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WebBlog.Data.Model.PostTag", b =>
                {
                    b.HasOne("WebBlog.Data.Model.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebBlog.Data.Model.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WebBlog.Data.Model.User", b =>
                {
                    b.HasOne("WebBlog.Data.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("WebBlog.Data.Model.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("UserID")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("UserID");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserID");
                        });

                    b.Navigation("RefreshTokens");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Category", b =>
                {
                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Post", b =>
                {
                    b.Navigation("PostCategories");

                    b.Navigation("PostComments");

                    b.Navigation("PostMetas");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("WebBlog.Data.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebBlog.Data.Model.User", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
